-module(problem11).
-export([solve/0]).

%% In the 20x20 grid below, four numbers along a diagonal line have
%% been marked in red.
%% 
%% 08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
%% 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
%% 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
%% 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
%% 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
%% 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
%% 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
%% 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
%% 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
%% 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
%% 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
%% 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
%% 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
%% 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
%% 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
%% 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
%% 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
%% 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
%% 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
%% 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
%%
%% The product of these numbers is 26  63  78  14 = 1788696.
%% 
%% What is the greatest product of four adjacent numbers in the same
%% direction (up, down, left, right, or diagonally) in the 20x20 grid?
%%
%% I got stuck in the world of Erlang trying to figure out how to do
%% it somewhat elegantly with the lists so I took Cayle's solution at
%% a certain point for the product calculation
%%
%% http://caylespandon.blogspot.nl/2009/01/erlang-solution-for-euler-problem-11.html

-define(SEQUENCE, 4).
-define(SIZE, 20).
-define(GRID, [[08,02,22,97,38,15,00,40,00,75,04,05,07,78,52,12,50,77,91,08],
               [49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48,04,56,62,00],
               [81,49,31,73,55,79,14,29,93,71,40,67,53,88,30,03,49,13,36,65],
               [52,70,95,23,04,60,11,42,69,24,68,56,01,32,56,71,37,02,36,91],
               [22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80],
               [24,47,32,60,99,03,45,02,44,75,33,53,78,36,84,20,35,17,12,50],
               [32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70],
               [67,26,20,68,02,62,12,20,95,63,94,39,63,08,40,91,66,49,94,21],
               [24,55,58,05,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72],
               [21,36,23,09,75,00,76,44,20,45,35,14,00,61,33,97,34,31,33,95],
               [78,17,53,28,22,75,31,67,15,94,03,80,04,62,16,14,09,53,56,92],
               [16,39,05,42,96,35,31,47,55,58,88,24,00,17,54,24,36,29,85,57],
               [86,56,00,48,35,71,89,07,05,44,44,37,44,60,21,58,51,54,17,58],
               [19,80,81,68,05,94,47,69,28,73,92,13,86,52,17,77,04,89,55,40],
               [04,52,08,83,97,35,99,16,07,97,57,32,16,26,26,79,33,27,98,66],
               [88,36,68,87,57,62,20,72,03,46,33,67,46,55,12,32,63,93,53,69],
               [04,42,16,73,38,25,39,11,24,94,72,18,08,46,29,32,40,62,76,36],
               [20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74,04,36,16],
               [20,73,35,29,78,31,90,01,74,31,49,71,48,86,81,16,23,57,05,54],
               [01,70,54,71,83,51,54,69,16,92,33,48,61,43,52,01,89,19,67,48]]).

value_at(X, Y) ->
    lists:nth(X, lists:nth(Y, ?GRID)). 

product(X, Y, MoveX, MoveY, N) ->
    Val = value_at(X, Y),
    if
        N == 1 ->
            Val;
        N > 1 ->
            Val * product(X+MoveX, Y+MoveY, MoveX, MoveY, N-1)
    end. 

product(X, Y, MoveX, MoveY) ->
    if
        X + ?SEQUENCE*MoveX - 1 > ?SIZE ->
            0;
        X + ?SEQUENCE*MoveX - 1 < 1 ->
            0;
        Y + ?SEQUENCE*MoveY - 1 > ?SIZE ->
            0;
        Y + ?SEQUENCE*MoveY - 1 < 1 ->
            0;
        true ->
            product(X, Y, MoveX, MoveY, ?SEQUENCE)
    end.

solve(X,Y) ->
    lists:max([product(X,Y,1,0),
               product(X,Y,0,1),
               product(X,Y,1,1),
               product(X,Y,1,-1)]).

solve(Y) ->
    lists:max(lists:map(fun(X) -> solve(X, Y) end, lists:seq(1, ?SIZE))).

solve() ->
    lists:max(lists:map(fun(Y) -> solve(Y) end, lists:seq(1, ?SIZE))).
